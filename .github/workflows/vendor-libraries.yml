name: "Vendor Library Dependencies"
on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force library update even if no changes detected'
        type: boolean
        default: false
  schedule:
    - cron: '0 0 1 * *'  # Berjalan setiap bulan sekali

jobs:
  extract-windows-libraries:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}  # Gunakan PAT dengan izin push
          fetch-depth: 0  # Fetch semua history untuk mencegah rejection

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gexiv2

      - name: Run Windows Library Extraction Script
        shell: pwsh
        run: |
          # Set execution policy for current process
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force
          
          # Verify script exists
          if (!(Test-Path "scripts/extract-windows-libs.ps1")) {
            Write-Error "Script not found: scripts/extract-windows-libs.ps1"
            exit 1
          }
          
          # Run the extraction script
          Write-Host "Menjalankan script ekstraksi library Windows..."
          ./scripts/extract-windows-libs.ps1

      - name: Commit and Push Windows Libraries
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Fetch the latest changes from remote
          git fetch origin
          
          # Create a unique branch name for this run
          $branchName = "lib-update-windows-$env:GITHUB_RUN_ID"
          git checkout -b $branchName
          
          # Add changes
          git add src-tauri/libs/windows
          
          # Check if there are changes to commit
          $hasChanges = (git status --porcelain | Measure-Object).Count -gt 0
          if ($hasChanges) {
            git commit -m "Update Windows libraries"
            git push origin $branchName
            
            # Create or update PR
            gh pr create --title "Update Windows libraries" --body "Updated Windows libraries via automated script" --base main --head $branchName || gh pr edit --title "Update Windows libraries" --body "Updated Windows libraries via automated script" 
          } else {
            Write-Host "No changes to commit"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

  extract-macos-libraries:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}  # Gunakan PAT dengan izin push
          fetch-depth: 0  # Fetch semua history untuk mencegah rejection

      - name: Run macOS Library Extraction Script
        run: |
          # Verify script exists
          if [ ! -f "scripts/extract-macos-libs.sh" ]; then
            echo "Script not found: scripts/extract-macos-libs.sh"
            exit 1
          fi
          
          # Make the script executable
          chmod +x scripts/extract-macos-libs.sh
          
          # Run the extraction script
          echo "Menjalankan script ekstraksi library macOS..."
          ./scripts/extract-macos-libs.sh

      - name: Commit and Push macOS Libraries
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Fetch the latest changes from remote
          git fetch origin
          
          # Create a unique branch name for this run
          branchName="lib-update-macos-$GITHUB_RUN_ID"
          git checkout -b $branchName
          
          # Add changes
          git add src-tauri/libs/macos
          
          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "Update macOS libraries"
            git push origin $branchName
            
            # Create or update PR
            gh pr create --title "Update macOS libraries" --body "Updated macOS libraries via automated script" --base main --head $branchName || gh pr edit --title "Update macOS libraries" --body "Updated macOS libraries via automated script"
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

   extract-linux-libraries:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.REPO_TOKEN }}  # Gunakan PAT dengan izin push
            fetch-depth: 0  # Fetch semua history untuk mencegah rejection
  
        - name: Run Linux Library Extraction Script
          run: |
            # Verify script exists
            if [ ! -f "scripts/extract-linux-libs.sh" ]; then
              echo "Script not found: scripts/extract-linux-libs.sh"
              exit 1
            fi
            
            # Make the script executable
            chmod +x scripts/extract-linux-libs.sh
            
            # Run the extraction script with sudo
            echo "Menjalankan script ekstraksi library Linux..."
            sudo -E ./scripts/extract-linux-libs.sh
  
        - name: Commit and Push Linux Libraries
          run: |
            git config user.name "GitHub Actions Bot"
            git config user.email "actions@github.com"
            
            # Fetch the latest changes from remote
            git fetch origin
            
            # Create a unique branch name for this run
            branchName="lib-update-linux-$GITHUB_RUN_ID"
            git checkout -b $branchName
            
            # Add all changes - include both libraries and the script
            git add src-tauri/libs/linux
            git add scripts/extract-linux-libs.sh
            
            # Check if there are changes to commit
            if [[ -n "$(git status --porcelain)" ]]; then
              git commit -m "Update Linux libraries and extraction script"
              git push origin $branchName
              
              # Create or update PR
              gh pr create --title "Update Linux libraries" --body "Updated Linux libraries and extraction script via automated job" --base main --head $branchName || gh pr edit --title "Update Linux libraries" --body "Updated Linux libraries and extraction script via automated job"
            else
              echo "No changes to commit"
            fi
          env:
            GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

  merge-prs:
    needs: [extract-windows-libraries, extract-macos-libraries, extract-linux-libraries]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.force_update == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Merge all Platform PRs
        run: |
          # List PRs
          echo "Finding open PRs from library update jobs..."
          
          # Try to merge the Windows PR
          windowsBranch="lib-update-windows-$GITHUB_RUN_ID"
          gh pr list --head $windowsBranch --json number --jq '.[0].number' | xargs -I{} gh pr merge {} --merge || echo "No Windows PR to merge"
          
          # Try to merge the macOS PR
          macosBranch="lib-update-macos-$GITHUB_RUN_ID"
          gh pr list --head $macosBranch --json number --jq '.[0].number' | xargs -I{} gh pr merge {} --merge || echo "No macOS PR to merge"
          
          # Try to merge the Linux PR
          linuxBranch="lib-update-linux-$GITHUB_RUN_ID"
          gh pr list --head $linuxBranch --json number --jq '.[0].number' | xargs -I{} gh pr merge {} --merge || echo "No Linux PR to merge"
          
          # Create a summary PR if force update was selected
          if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            # Create a combined branch
            git checkout -b lib-update-all-$GITHUB_RUN_ID
            
            # Pull all changes from main
            git pull origin main
            
            # Check for changes and create PR
            if git diff --quiet origin/main -- src-tauri/libs; then
              echo "No library changes detected, skipping PR creation"
            else
              git push origin lib-update-all-$GITHUB_RUN_ID
              
              gh pr create --title "Update all platform libraries" \
                          --body "This PR combines all library updates from the individual platform jobs" \
                          --base main \
                          --head lib-update-all-$GITHUB_RUN_ID
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
